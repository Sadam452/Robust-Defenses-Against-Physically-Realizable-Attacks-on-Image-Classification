# -*- coding: utf-8 -*-
"""FinalMinist_ROA/DOA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ITXseTO0DrpkagKTcbYcB0gARBGBbot5
"""

# The code is based on https://colab.research.google.com/github/omerbsezer/Fast-Pytorch/blob/master/Learning_Pytorch/CNN_Mnist.ipynb#scrollTo=3ve5cf1rBYJ-
import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torch.autograd import Variable
import torchvision
torch.cuda.is_available()
import matplotlib.pyplot as plt
# This file basically runs Rectangular Occlusion Attacks (ROA) see paper

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import numpy as np
import os
import time



class ROA(object):
    '''
    Make sticker
    '''

    def __init__(self, base_classifier, size):
        self.base_classifier = base_classifier
        self.img_size = size
        """
        :param base_classifier: maps from [batch x channel x height x width] to [batch x num_classes]
        :param size: the image size
        """

    def exhaustive_search(self, X, y, alpha, num_iter, width, height, xskip, yskip,random = False):
        """
        :param X: images from the pytorch dataloaders
        :param y: labels from the pytorch dataloaders
        :param alpha: the learning rate of inside PGD attacks
        :param num_iter: the number of iterations of inside PGD attacks
        :param width: the width of ROA
        :param height: the height of ROA
        :param xskip: the skip (stride) when searching in x axis
        :param yskip: the skip (stride) when searching in y axis
        :param random: the initialization the ROA before inside PGD attacks,
                       True is random initialization, False is 0.5 initialization
        """
        # start_time = time.time()  # Start time for measuring execution time
        with torch.set_grad_enabled(False):

            model = self.base_classifier
            size = self.img_size

            model.eval()
            device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
            X = X.to(device)
            y = y.to(device)

            max_loss = torch.zeros(y.shape[0]).to(y.device) - 100
            all_loss = torch.zeros(y.shape[0]).to(y.device)

            xtimes = (size-width) //xskip
            ytimes = (size-height)//yskip

            output_j = torch.zeros(y.shape[0])
            output_i = torch.zeros(y.shape[0])

            count = torch.zeros(y.shape[0])
            ones = torch.ones(y.shape[0])

            for i in range(xtimes):
                for j in range(ytimes):
                    if torch.all(X[:, :, yskip * j:(yskip * j + height//2), xskip * i:(xskip * i + width//2)] == 0):
                          # Check if the background is completely black, if so, skip further checking
                          # print("skipped")
                          continue
                    sticker = X.clone()
                    sticker[:,:,yskip*j:(yskip*j+height),xskip*i:(xskip*i+width)] = 1/2
                    all_loss = nn.CrossEntropyLoss(reduction='none')(model(sticker),y)
                    padding_j = torch.zeros(y.shape[0]) + j
                    padding_i = torch.zeros(y.shape[0]) + i
                    output_j[all_loss > max_loss] = padding_j[all_loss > max_loss]
                    output_i[all_loss > max_loss] = padding_i[all_loss > max_loss]
                    count +=  (all_loss == max_loss).type(torch.FloatTensor)
                    max_loss = torch.max(max_loss, all_loss)

            same_loss = np.transpose(np.argwhere(count>=xtimes*ytimes*0.9))
            for ind in same_loss:
                output_j[ind] = torch.randint(ytimes,(1,))
                output_i[ind] = torch.randint(xtimes,(1,))

            zero_loss =  np.transpose(np.argwhere(max_loss.cpu()==0))
            for ind in zero_loss:
                output_j[ind] = torch.randint(ytimes,(1,))
                output_i[ind] = torch.randint(xtimes,(1,))


        with torch.set_grad_enabled(True):
            result = self.inside_pgd(X,y,width, height,alpha, num_iter, xskip, yskip, output_j, output_i )
        # end_time = time.time()  # End time for measuring execution time
        # print("Execution time:", end_time - start_time, "seconds")
        return result



    def gradient_based_search(self, X, y, alpha, num_iter, width, height, xskip, yskip, potential_nums,random = False):
        """
        :param X: images from the pytorch dataloaders
        :param y: labels from the pytorch dataloaders
        :param alpha: the learning rate of inside PGD attacks
        :param num_iter: the number of iterations of inside PGD attacks
        :param width: the width of ROA
        :param height: the height of ROA
        :param xskip: the skip (stride) when searching in x axis
        :param yskip: the skip (stride) when searching in y axis
        :param potential_nums: the number of keeping potential candidate position
        :param random: the initialization the ROA before inside PGD attacks,
                       True is random initialization, False is 0.5 initialization
        """

        model = self.base_classifier
        size = self.img_size

        device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

        # Cache for gradients
        cached_gradients = {}

        gradient = torch.zeros_like(X, requires_grad=True).to(device)
        X1 = torch.zeros_like(X, requires_grad=True).to(device)
        X = X.to(device)
        y = y.to(device)
        X1.data = X.detach().to(device)

        # Check if gradients for this input are already cached
        input_key = (X.shape, y.shape, device)
        if input_key not in cached_gradients:
            loss = nn.CrossEntropyLoss()(model(X1), y)
            loss.backward()
            gradient.data = X1.grad.detach()
            cached_gradients[input_key] = gradient.data
        else:
            gradient.data = cached_gradients[input_key]

        max_val, _ = torch.max(torch.abs(gradient.view(gradient.shape[0], -1)), 1)
        gradient = gradient / max_val[:, None, None, None]
        X1.grad.zero_()

        xtimes = (size-width) //xskip
        ytimes = (size-height)//yskip
        #print(xtimes,ytimes)


        nums = potential_nums
        output_j1 = torch.zeros(y.shape[0]).repeat(nums).view(y.shape[0],nums)
        output_i1 = torch.zeros(y.shape[0]).repeat(nums).view(y.shape[0],nums)
        matrix = torch.zeros([ytimes*xtimes]).repeat(1,y.shape[0]).view(y.shape[0],ytimes*xtimes)
        max_loss = torch.zeros(y.shape[0]).to(y.device)
        all_loss = torch.zeros(y.shape[0]).to(y.device)

        for i in range(xtimes):
            for j in range(ytimes):
                if torch.all(X[:, :, yskip * j:(yskip * j + height//2), xskip * i:(xskip * i + width//2)] == 0):
                          # Check if the background is completely black, if so, skip further checking
                          # print("skipped")
                          continue
                num = gradient[:,:,yskip*j:(yskip*j+height),xskip*i:(xskip*i+width)]
                loss = torch.sum(torch.sum(torch.sum(torch.mul(num,num),1),1),1)
                matrix[:,j*xtimes+i] = loss
        topk_values, topk_indices = torch.topk(matrix,nums)
        output_j1 = topk_indices//xtimes
        output_i1 = topk_indices %xtimes

        output_j = torch.zeros(y.shape[0]) + output_j1[:,0].float()
        output_i = torch.zeros(y.shape[0]) + output_i1[:,0].float()

        with torch.set_grad_enabled(False):
            for l in range(output_j1.size(1)):

                sticker = X.clone()
                for m in range(output_j1.size(0)):
                    sticker[m,:,yskip*output_j1[m,l]:(yskip*output_j1[m,l]+height),xskip*output_i1[m,l]:(xskip*output_i1[m,l]+width)] = 1/2
                sticker1 = sticker.detach()
                all_loss = nn.CrossEntropyLoss(reduction='none')(model(sticker1),y)
                padding_j = torch.zeros(y.shape[0]) + output_j1[:,l].float()
                padding_i = torch.zeros(y.shape[0]) + output_i1[:,l].float()
                output_j[all_loss > max_loss] = padding_j[all_loss > max_loss]
                output_i[all_loss > max_loss] = padding_i[all_loss > max_loss]
                max_loss = torch.max(max_loss, all_loss)

        return self.inside_pgd(X,y,width, height,alpha, num_iter, xskip, yskip, output_j, output_i)




    def inside_pgd(self, X, y, width, height, alpha, num_iter, xskip, yskip, out_j, out_i, random = False):
        model = self.base_classifier
        model.eval()
        sticker = torch.zeros(X.shape, requires_grad=False)
        for num,ii in enumerate(out_i):
            j = int(out_j[num].item())
            i = int(ii.item())
            sticker[num,:,yskip*j:(yskip*j+height),xskip*i:(xskip*i+width)] = 1
        sticker = sticker.to(y.device)


        if random == False:
            delta = torch.zeros_like(X, requires_grad=True)+1/2
        else:
            delta = torch.rand_like(X, requires_grad=True).to(y.device)
            delta.data = delta.data * 255


        X1 = torch.rand_like(X, requires_grad=True).to(y.device)
        X1.data = X.detach()*(1-sticker)+((delta.detach())*sticker)

        for t in range(num_iter):
            loss = nn.CrossEntropyLoss()(model(X1), y)
            loss.backward()
            X1.data = (X1.detach() + alpha*X1.grad.detach().sign()*sticker)
            X1.data = (X1.detach() ).clamp(0,1)
            X1.grad.zero_()
        return (X1).detach()

import torch.nn.functional as F
from torch.nn import TransformerEncoder, TransformerEncoderLayer
# loading data
train_dataset= datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True)
test_dataset= datasets.MNIST(root='./data', train=False, transform=transforms.ToTensor())
# # Define the size of the subset (5%)
# subset_size = int(0.02 * len(train_dataset))
# subset_size_ = int(0.02 * len(test_dataset))

# # Create a random subset of the training dataset
# train_dataset = torch.utils.data.random_split(train_dataset, [subset_size, len(train_dataset) - subset_size])[0]

# # Create a random subset of the test dataset
# test_dataset = torch.utils.data.random_split(test_dataset, [subset_size_, len(test_dataset) - subset_size_])[0]


batch_size=100
epochs=5
train_load=torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
test_load=torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)

print("Number of images in training set: {}".format(len(train_dataset)))
print("Number of images in test set: {}".format(len(test_dataset)))
print("Number of batches in the train loader: {}".format(len(train_load)))
print("Number of batches in the test loader: {}".format(len(test_load)))

#show the images
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated

# Define the CNN model
class GaussianNoise(torch.nn.Module) :
    def __init__(self, sigma, device='cuda'):
        super().__init__()
        self.sigma = sigma
        print ( device )
        self.noise = torch.tensor(0.)

    def forward(self,x):
        if self.training and self.sigma != 0:
            scale = self.sigma * x.detach()
            sampled_noise = self.noise.repeat(*x.size()).normal_() * scale
            x = x + sampled_noise
        return x

class CNNWithTransformer(nn.Module):
    def __init__(self, embed_size=32, num_heads=2, dropout=0.1, sigma=0.4):
        super(CNNWithTransformer, self).__init__()
        self.sigma = sigma

        if self.sigma:
            self.noise1 = GaussianNoise(self.sigma)
            self.noise2 = GaussianNoise(self.sigma)

        # Define CNN layers
        self.cnn1 = nn.Conv2d(in_channels=1, out_channels=8, kernel_size=3, stride=1, padding=1)
        self.batchnorm1 = nn.BatchNorm2d(8)
        self.relu = nn.ReLU()
        self.maxpool1 = nn.MaxPool2d(kernel_size=2)
        self.cnn2 = nn.Conv2d(in_channels=8, out_channels=32, kernel_size=5, stride=1, padding=2)
        self.batchnorm2 = nn.BatchNorm2d(32)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2)

        # Calculate the output size of the CNN layers
        self.cnn_output_size = 32 * 7 * 7  # Output size after maxpooling

        # Transformer encoder layer
        self.transformer_encoder_layer = TransformerEncoderLayer(d_model=self.cnn_output_size, nhead=num_heads)
        self.transformer_encoder = TransformerEncoder(self.transformer_encoder_layer, num_layers=1)

        # Linear layers for classification
        self.fc1 = nn.Linear(in_features=self.cnn_output_size, out_features=600)
        self.dropout = nn.Dropout(p=0.5)
        self.fc2 = nn.Linear(in_features=600, out_features=10)

    def forward(self, x):
        # CNN forward pass
        out = self.cnn1(x)
        if self.sigma:
            out = self.noise1(out)
        out = self.batchnorm1(out)
        out = self.relu(out)
        out = self.maxpool1(out)
        out = self.cnn2(out)
        out = self.batchnorm2(out)
        out = self.relu(out)
        out = self.maxpool2(out)

        # Flatten the output
        out = out.view(-1, self.cnn_output_size)
        if self.sigma:
            out = self.noise2(out)

        # Transformer encoder forward pass
        out = out.unsqueeze(0)  # Add batch dimension
        out = self.transformer_encoder(out)
        out = out.squeeze(0)  # Remove batch dimension

        # Classification layers
        out = self.fc1(out)
        out = self.relu(out)
        out = self.dropout(out)
        out = self.fc2(out)

        return out
class CombinedModel(nn.Module):
    def __init__(self, cnn_model, transformer_model):
        super(CombinedModel, self).__init__()
        self.cnn_model = cnn_model
        self.transformer_model = transformer_model

    def forward(self, x):
        cnn_output = self.cnn_model(x)
        cnn_output = cnn_output.view(cnn_output.size(0), -1, self.transformer_model.embed_size)
        transformer_output = self.transformer_model.transformer_encoder(cnn_output)
        transformer_output = transformer_output.view(transformer_output.size(0), -1)
        return self.cnn_model.fc(transformer_output)

# Set up the model
# Create instances of CNN and transformer models
# cnn_model = CNN()
# transformer_encoder = torch.nn.TransformerEncoder
model = CNNWithTransformer()

# Create an instance of the combined model
#model = CNNTransformer()

CUDA=torch.cuda.is_available()
if CUDA:
  model=model.cuda()
loss_function=nn.CrossEntropyLoss()
optimizer=torch.optim.SGD(model.parameters(), lr=0.01)

iteration=0
res_time=0
for epoch in range(epochs):
  print("Epoch ", epoch, "/",epochs)
  for i, (images,labels) in enumerate(train_load):
    iteration+=1
    if CUDA:
      images =Variable(images.cuda())
      labels =Variable(labels.cuda())
    else:
      images =Variable(images)
      labels =Variable(labels)
    #initialize the ROA module
    roa = ROA(model, 28)

    learning_rate = 0.1
    iterations = 5
    ROAwidth = 10
    ROAheight = 10
    skip_in_x = 2
    skip_in_y = 2
    potential_nums = 5

##############################################################################
    # Gradient Based Search
    # Image = roa.gradient_based_search(images, labels, learning_rate,\
    #     iterations, ROAwidth , ROAheight, skip_in_x, skip_in_y, potential_nums)
    '''
    press command and click the roa.gradient_based_search to check how to use
    hyperparameter:

    '''

##############################################################################
    #Exhaustive Search
    #print(images.shape)
    start_time = time.time()  # Start time for measuring execution time
    Image = roa.exhaustive_search(images, labels, learning_rate,\
       iterations, ROAwidth , ROAheight, skip_in_x, skip_in_y)

    end_time = time.time()  # End time for measuring execution time
    res_time += end_time - start_time
    '''
    press command and click the roa.exhaustive_search to check how to use
    hyperparameter:
    '''

    # show some images
    # if i == 1:
    #     print(Image.shape)
    #     out = torchvision.utils.make_grid(Image[0:5])
    #     print(out.shape)
    #     imshow(out.cpu())


    optimizer.zero_grad()
    outputs=model(Image)
    loss=loss_function(outputs,labels)
    loss.backward()
    optimizer.step()

    if(i+1)%100 ==0:
        correct =0
        correct_adv = 0
        total =0
        for images,labels in test_load:
            if CUDA:
              images =Variable(images.cuda())
            else:
              images =Variable(images)
            Image = roa.gradient_based_search(images, labels, learning_rate,\
        iterations, ROAwidth , ROAheight, skip_in_x, skip_in_y, potential_nums)
            outputs_adv=model(Image)
            _,predicted_adv=torch.max(outputs_adv.data,1)

            outputs=model(images)
            _,predicted=torch.max(outputs.data,1)

            total+=labels.size(0)
            if CUDA:
              correct += (predicted.cpu()==labels.cpu()).sum()
              correct_adv += (predicted_adv.cpu()==labels.cpu()).sum()
            else:
              correct += (predicted==labels).sum()
              correct_adv += (predicted_adv==labels).sum()

        accuracy = 100 *correct/total
        accuracy_adv = 100 *correct_adv/total
        print("Iteration: {}, Train Loss: {}, Test Accuracy:{}%, Adv_test Accuracy:{}%".format(iteration, loss.item(),accuracy, accuracy_adv))

print("Finished!")
print(res_time)